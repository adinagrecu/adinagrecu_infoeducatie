package org.firstinspires.ftc.teamcode.MechanumTeleOp;

import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.HardwareMap;

import org.firstinspires.ftc.robotcore.external.Telemetry;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.teamcode.Libs.GAMEPAD;
import org.firstinspires.ftc.teamcode.Libs.Utils;


public class MechanumDrive {
//
//    private BNO055IMU imu;
//
//    // State used for updating telemetry
//    private Orientation angles;


    DcMotor leftFront = null;
    DcMotor rightFront = null;
    DcMotor rightRear = null;
    DcMotor leftRear = null;

    Telemetry telemetry = null;
    GAMEPAD gamepad1 = null;
    GAMEPAD gamepad2 = null;

    MechanumDrive(HardwareMap hardwareMap, Telemetry telemetry, GAMEPAD gamepad1, GAMEPAD gamepad2) {
        this.telemetry = telemetry;
        this.gamepad1 = gamepad1;
        this.gamepad2 = gamepad2;
        initMechanum(hardwareMap);
    }

    void initMechanum(HardwareMap hardwareMap) {

        this.leftFront = hardwareMap.dcMotor.get("leftFront");
        this.rightFront = hardwareMap.dcMotor.get("rightFront");
        this.rightRear = hardwareMap.dcMotor.get("rightRear");
        this.leftRear = hardwareMap.dcMotor.get("leftRear");

        leftFront.setDirection(DcMotorSimple.Direction.REVERSE);
        rightFront.setDirection(DcMotorSimple.Direction.FORWARD);
        rightRear.setDirection(DcMotorSimple.Direction.FORWARD);
        leftRear.setDirection(DcMotorSimple.Direction.FORWARD);

        leftFront.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightFront.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        rightRear.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        leftRear.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);


//        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
//        parameters.angleUnit = BNO055IMU.AngleUnit.DEGREES;
//        parameters.accelUnit = BNO055IMU.AccelUnit.METERS_PERSEC_PERSEC;
//        parameters.loggingEnabled = true;
//        parameters.loggingTag = "IMU";

        // Retrieve and initialize the IMU. We expect the IMU to be attached to an I2C port
        // on a Core Device Interface Module, configured to be a sensor of type "AdaFruit IMU",
        // and named "imu".
//        imu = hardwareMap.get(BNO055IMU.class, "imu");
//        imu.initialize(parameters);


    }

    void goTeleOp() {
        goMechanum(gamepad1.left_stick_powerY, gamepad1.left_stick_powerX, gamepad1.right_stick_powerX);
//        telemetryAddHeading();
        motorLog();
    }

    void motorLog(){
//        telemetry.addData("right encoder ", leftFront.getCurrentPosition());
//        telemetry.addData("side encoder", leftRear.getCurrentPosition());
//        telemetry.addData("left endoder", rightFront.getCurrentPosition());
        telemetry.addData("rightBack pos",rightRear.getCurrentPosition());
        telemetry.addData("rightFront pos",rightFront.getCurrentPosition());
        telemetry.addData("leftRear pos",leftRear.getCurrentPosition());
        telemetry.addData("leftFront ",leftFront.getCurrentPosition());
    }

//    public void telemetryAddHeading(){
//        telemetry.addData("Heading ", getHeading());
//    }

//    private int getHeading() {
//        angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES);
//        int heading = (int) AngleUnit.DEGREES.normalize(AngleUnit.DEGREES.fromUnit(angles.angleUnit, angles.firstAngle));
//        if (heading > 180)
//            heading = heading - 360;
//        return heading;
//    }


    void setPower(double a, double b, double c, double d) {
        if (this.gamepad1.a.toggle) {
            leftFront.setPower(a*0.4);
            rightFront.setPower(b*0.4);
            rightRear.setPower(c*0.4);
            leftRear.setPower(d*0.4);
        } else {
            leftFront.setPower(a);
            rightFront.setPower(b);
            rightRear.setPower(c);
            leftRear.setPower(d);
        }
    }

    void goMechanum(double left_Stick_powerY, double left_Stick_powerX, double right_Stick_powerX) {
        double a, b, c, d;
            a = -left_Stick_powerX - left_Stick_powerY - right_Stick_powerX;
            b = left_Stick_powerX - left_Stick_powerY + right_Stick_powerX;
            c = -left_Stick_powerX - left_Stick_powerY + right_Stick_powerX;
            d = left_Stick_powerX - left_Stick_powerY - right_Stick_powerX;

            a = Utils.cut(a, -1d, 1d);
            b = Utils.cut(b, -1d, 1d);
            c = Utils.cut(c, -1d, 1d);
            d = Utils.cut(d, -1d, 1d);

            setPower(a, b, c, d);


    }
}
