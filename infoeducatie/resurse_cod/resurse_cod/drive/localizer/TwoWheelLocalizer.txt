package org.firstinspires.ftc.teamcode.drive.localizer;

import android.support.annotation.NonNull;

import com.acmerobotics.roadrunner.geometry.Pose2d;
import com.acmerobotics.roadrunner.localization.TwoTrackingWheelLocalizer;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.HardwareMap;

import org.jetbrains.annotations.NotNull;
import org.openftc.revextensions2.ExpansionHubEx;
import org.openftc.revextensions2.ExpansionHubMotor;
import org.openftc.revextensions2.RevBulkData;

import java.util.Arrays;
import java.util.List;

public class TwoWheelLocalizer extends TwoTrackingWheelLocalizer {

    public static ExpansionHubEx expansionHubEx;
    public static double TICKS_PER_REV = 1440;
    public static double WHEEL_RADIUS = 0.75; // in
    public static double GEAR_RATIO = 1; // output (wheel) speed / input (encoder) speed

    public static double LATERAL_DISTANCE = 12.95; // in; distance between the left and right wheels
    public static double FORWARD_OFFSET = 1.89;//1.4 // in; offset of the lateral wheel  1.89

    private ExpansionHubMotor  rightEncoder, frontEncoder;
    private BNO055IMU imu;

    public TwoWheelLocalizer(HardwareMap hardwareMap) {
        super(Arrays.asList(
                new Pose2d(0, -LATERAL_DISTANCE / 2, 0), // right
                new Pose2d(FORWARD_OFFSET, 0, Math.toRadians(90)) // front
        ));
        imu = hardwareMap.get(BNO055IMU.class, "imu");
        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit = BNO055IMU.AngleUnit.RADIANS;
        imu.initialize(parameters);
        imu = hardwareMap.get(BNO055IMU.class, "imu");
        frontEncoder = hardwareMap.get(ExpansionHubMotor.class,"rightEncoder");
        rightEncoder = hardwareMap.get(ExpansionHubMotor.class,"sideEncoder");
        expansionHubEx = hardwareMap.get(ExpansionHubEx.class,"Expansion Hub 3");
        frontEncoder.setDirection(DcMotorSimple.Direction.REVERSE);

    }

    public static double encoderTicksToInches(int ticks) {
        return WHEEL_RADIUS * 2 * Math.PI * GEAR_RATIO * ticks / TICKS_PER_REV;
    }

    @Override
    public double getHeading() {
        return imu.getAngularOrientation().firstAngle;
    }

    @NonNull
    @Override
    public List<Double> getWheelPositions() {
        RevBulkData bulk = expansionHubEx.getBulkInputData();
        return Arrays.asList(
                encoderTicksToInches(bulk.getMotorCurrentPosition(rightEncoder)),
                encoderTicksToInches(bulk.getMotorCurrentPosition(frontEncoder))
        );
    }



}
